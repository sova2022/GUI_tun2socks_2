# -*- coding: utf-8 -*-


# Form implementation generated from reading ui file 'GUI_tun2socks_2.0.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import ctypes
import sys
ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
from   PyQt5 import QtCore, QtGui, QtWidgets
from   elevate import elevate
import re
from   PyQt5.Qt import *
from   threading import Thread
import sys
from   subprocess import Popen, PIPE, run
import time
import io
import requests
import os
import psutil
from   datetime import datetime
from   bs4 import BeautifulSoup as BS

# CONSTANTS & SETTINGS
fname='proxy.txt'
dir = os.path.abspath(os.curdir)
dir_fakestan = os.path.join(dir, 'fakestun')
dir_dns_crypt = os.path.join(dir, 'dnscrypt-proxy')
dir_regedit = f'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\Interfaces'
PROXY_CHECK_TIMEOUT = 5
# elevate()


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(771, 407)
        MainWindow.setWindowIcon(QIcon('icon.ico'))
        self.setWindowFlags(QtCore.Qt.CustomizeWindowHint)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setWeight(50)
        MainWindow.setFont(font)



        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet('.QWidget {background-image: url(background.png);}')

        self.lb_cb_fake_webrtc = QtWidgets.QLabel(self.centralwidget)
        self.lb_cb_fake_webrtc.setGeometry(QtCore.QRect(520, 60, 61, 16))
        self.lb_cb_fake_webrtc.setObjectName("lb_cb_fake_webrtc")

        self.lb_cb_log_sillent = QtWidgets.QLabel(self.centralwidget)
        self.lb_cb_log_sillent.setGeometry(QtCore.QRect(520, 100, 61, 16))
        self.lb_cb_log_sillent.setObjectName("lb_cb_log_sillent")

        self.lb_info = QtWidgets.QLabel(self.centralwidget)
        self.lb_info.setGeometry(QtCore.QRect(620, 20, 35, 16))
        self.lb_info.setObjectName("lb_info")

        self.lb_proxy_address = QtWidgets.QLabel(self.centralwidget)
        self.lb_proxy_address.setGeometry(QtCore.QRect(20, 20, 71, 16))
        self.lb_proxy_address.setObjectName("lb_proxy_address")

        self.lb_proxy_login = QtWidgets.QLabel(self.centralwidget)
        self.lb_proxy_login.setGeometry(QtCore.QRect(20, 80, 71, 16))
        self.lb_proxy_login.setObjectName("lb_proxy_login")

        self.lb_proxy_password = QtWidgets.QLabel(self.centralwidget)
        self.lb_proxy_password.setGeometry(QtCore.QRect(170, 80, 60, 16))
        self.lb_proxy_password.setObjectName("lb_proxy_password")

        self.lb_proxy_port = QtWidgets.QLabel(self.centralwidget)
        self.lb_proxy_port.setGeometry(QtCore.QRect(170, 20, 41, 16))
        self.lb_proxy_port.setObjectName("lb_proxy_port")

        self.lb_cb_check_proxy = QtWidgets.QLabel(self.centralwidget)
        self.lb_cb_check_proxy.setGeometry(QtCore.QRect(260, 20, 61, 16))
        self.lb_cb_check_proxy.setObjectName("lb_cb_check_proxy")

        self.lb_rb_driver = QtWidgets.QLabel(self.centralwidget)
        self.lb_rb_driver.setGeometry(QtCore.QRect(300, 80, 48, 16))
        self.lb_rb_driver.setObjectName("lb_rb_driver")

        self.lb_cb_dns = QtWidgets.QLabel(self.centralwidget)
        self.lb_cb_dns.setGeometry(QtCore.QRect(340, 20, 21, 16))
        self.lb_cb_dns.setObjectName("lb_cb_dns")

        self.lb_le_dns_1 = QtWidgets.QLabel(self.centralwidget)
        self.lb_le_dns_1.setGeometry(QtCore.QRect(380, 20, 121, 16))
        self.lb_le_dns_1.setObjectName("lb_le_dns_1")

        self.lb_le_dns_2 = QtWidgets.QLabel(self.centralwidget)
        self.lb_le_dns_2.setGeometry(QtCore.QRect(380, 80, 121, 16))
        self.lb_le_dns_2.setObjectName("lb_le_dns_2")

        self.lb_cb_dns_crypt = QtWidgets.QLabel(self.centralwidget)
        self.lb_cb_dns_crypt.setGeometry(QtCore.QRect(520, 20, 61, 16))
        self.lb_cb_dns_crypt.setObjectName("lb_cb_dns_crypt")

        self.main_name = QtWidgets.QLabel(self.centralwidget)
        self.main_name.setGeometry(QtCore.QRect(0, 0, 781, 20))
        font6 = QtGui.QFont()
        font6.setPointSize(10)
        font6.setBold(True)
        font6.setWeight(75)
        self.main_name.setFont(font6)
        self.main_name.setWordWrap(False)
        self.main_name.setObjectName("main_name")

        #####################

        self.btn_minimize = QtWidgets.QPushButton(self.centralwidget)
        self.btn_minimize.setGeometry(QtCore.QRect(727, 1, 21, 21))
        self.btn_minimize.setObjectName("btn_minimize")
        self.btn_minimize.clicked.connect(self.on_min)
        self.btn_minimize.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
                                    "border: none;")

        self.btn_close = QtWidgets.QPushButton(self.centralwidget)
        self.btn_close.setGeometry(QtCore.QRect(748, 1, 21, 21))
        self.btn_close.setObjectName("btn_close")
        self.btn_close.clicked.connect(self.hide_to_tray)
        self.btn_close.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
                                    "border: none;")

        ##### LINE EDIT

        self.le_pr_address = QtWidgets.QLineEdit(self.centralwidget)
        self.le_pr_address.setGeometry(QtCore.QRect(20, 40, 121, 31))
        self.le_pr_address.setText("")
        self.le_pr_address.setObjectName("le_pr_address")
        self.le_pr_address.setMaxLength(15)
        font7 = QtGui.QFont()
        font7.setPointSize(11)
        rx = QtCore.QRegExp("[0-9.]{100}")
        val = QtGui.QRegExpValidator(rx)
        self.le_pr_address.setValidator(val)
        self.le_pr_address.setFont(font7)
        self.le_pr_address.setStyleSheet('border: 1px solid black; border-radius: 5px;')

        self.le_pr_port = QtWidgets.QLineEdit(self.centralwidget)
        self.le_pr_port.setGeometry(QtCore.QRect(170, 40, 71, 31))
        self.le_pr_port.setText("")
        self.le_pr_port.setObjectName("le_pr_port")
        self.le_pr_port.setMaxLength(5)
        rx2 = QtCore.QRegExp("[0-9]{100}")
        val2 = QtGui.QRegExpValidator(rx2)
        self.le_pr_port.setValidator(val2)
        self.le_pr_port.setFont(font7)
        self.le_pr_port.setStyleSheet('border: 1px solid black; border-radius: 5px;')

        self.le_pr_login = QtWidgets.QLineEdit(self.centralwidget)
        self.le_pr_login.setGeometry(QtCore.QRect(20, 100, 121, 31))
        self.le_pr_login.setText("")
        self.le_pr_login.setObjectName("le_pr_login")
        self.le_pr_login.setMaxLength(20)
        rx3 = QtCore.QRegExp("^[a-zA-Z0-9-_/.*+!@#$%^&*()\|=]{100}")
        val3 = QtGui.QRegExpValidator(rx3)
        self.le_pr_login.setValidator(val3)
        self.le_pr_login.setFont(font7)
        self.le_pr_login.setStyleSheet('border: 1px solid black; border-radius: 5px;')

        self.le_pr_password = QtWidgets.QLineEdit(self.centralwidget)
        self.le_pr_password.setGeometry(QtCore.QRect(170, 100, 111, 31))
        self.le_pr_password.setText("")
        self.le_pr_password.setObjectName("le_pr_password")
        self.le_pr_password.setMaxLength(20)
        self.le_pr_password.setValidator(val3)
        self.le_pr_password.setFont(font7)
        self.le_pr_password.setStyleSheet('border: 1px solid black; border-radius: 5px;')

        self.le_dns_address_1 = QtWidgets.QLineEdit(self.centralwidget)
        self.le_dns_address_1.setGeometry(QtCore.QRect(380, 40, 121, 31))
        self.le_dns_address_1.setText("8.8.8.8")
        self.le_dns_address_1.setObjectName("le_dns_address_1")
        self.le_dns_address_1.setMaxLength(15)
        self.le_dns_address_1.setValidator(val)
        self.le_dns_address_1.setFont(font7)
        self.le_dns_address_1.setStyleSheet('border: 1px solid black; border-radius: 5px;')

        self.le_dns_address_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.le_dns_address_2.setGeometry(QtCore.QRect(380, 100, 121, 31))
        self.le_dns_address_2.setText("8.8.4.4")
        self.le_dns_address_2.setObjectName("le_dns_address_2")
        self.le_dns_address_2.setMaxLength(15)
        self.le_dns_address_2.setValidator(val)
        self.le_dns_address_2.setFont(font7)
        self.le_dns_address_2.setStyleSheet('border: 1px solid black; border-radius: 5px;')

        ##############

        self.cb_check_proxy = QtWidgets.QCheckBox(self.centralwidget)
        self.cb_check_proxy.setGeometry(QtCore.QRect(280, 40, 21, 17))
        self.cb_check_proxy.setText("")
        self.cb_check_proxy.setObjectName("cb_check_proxy")

        self.cb_dns = QtWidgets.QCheckBox(self.centralwidget)
        self.cb_dns.setGeometry(QtCore.QRect(340, 40, 21, 17))
        self.cb_dns.setText("")
        self.cb_dns.setObjectName("cb_dns")
        # self.cb_dns.setChecked(True)

        self.cb_dns_crypt = QtWidgets.QCheckBox(self.centralwidget)
        self.cb_dns_crypt.setGeometry(QtCore.QRect(520, 40, 21, 17))
        self.cb_dns_crypt.setText("")
        self.cb_dns_crypt.setObjectName("cb_dns_crypt")
        self.cb_dns_crypt.clicked.connect(self.dns_crypt)

        self.cb_fak_webrtc = QtWidgets.QCheckBox(self.centralwidget)
        self.cb_fak_webrtc.setGeometry(QtCore.QRect(520, 80, 21, 17))
        self.cb_fak_webrtc.setText("")
        self.cb_fak_webrtc.setObjectName("cb_fak_webrtc")
        # self.cb_fak_webrtc.setChecked(True)
        self.cb_fak_webrtc.clicked.connect(self.fake_webrtc)

        self.cb_log_silent = QtWidgets.QCheckBox(self.centralwidget)
        self.cb_log_silent.setGeometry(QtCore.QRect(520, 120, 21, 17))
        self.cb_log_silent.setText("")
        self.cb_log_silent.setObjectName("cb_log_silent")
        # self.cb_fak_webrtc.setChecked(True)
        # self.cb_fak_webrtc.clicked.connect(self.fake_webrtc)

        self.btn_start = QtWidgets.QPushButton(self.centralwidget)
        self.btn_start.setGeometry(QtCore.QRect(20, 360, 81, 31))
        self.btn_start.setObjectName("btn_start")
        self.btn_start.clicked.connect(self.start)

        self.btn_stop = QtWidgets.QPushButton(self.centralwidget)
        self.btn_stop.setGeometry(QtCore.QRect(120, 360, 81, 31))
        self.btn_stop.setObjectName("btn_stop")
        self.btn_stop.setDisabled(True)
        self.btn_stop.clicked.connect(self.tun_stop)

        self.btn_resrart = QtWidgets.QPushButton(self.centralwidget)
        self.btn_resrart.setGeometry(QtCore.QRect(220, 360, 91, 31))
        self.btn_resrart.setObjectName("btn_resrart")
        self.btn_resrart.setDisabled(True)
        # self.btn_resrart.setStyleSheet('border: 1px solid black; border-radius: 5px;')
        # self.btn_resrart.clicked.connect(self.restart_fakewebrtc)
        self.btn_resrart.clicked.connect(self.restart_fakewebrtc)

        self.btn_donate = QtWidgets.QPushButton(self.centralwidget)
        self.btn_donate.setGeometry(QtCore.QRect(370, 360, 91, 31))
        self.btn_donate.setObjectName("btn_browserleaks")
        self.btn_donate.setDisabled(False)
        # self.btn_browserleaks.setStyleSheet('border: 1px solid black; border-radius: 5px;')
        # self.btn_browserleaks.clicked.connect(self.restart_fakewebrtc)
        self.btn_donate.clicked.connect(self.donate_info)
        self.btn_donate.clicked.connect(self.get_webrtc_ip)


        self.btn_exit = QtWidgets.QPushButton(self.centralwidget)
        self.btn_exit.setGeometry(QtCore.QRect(520, 360, 81, 31))
        self.btn_exit.setObjectName("btn_exit")
        self.btn_exit.clicked.connect(self.exit_app)

        self.lb_log_window = QtWidgets.QTextEdit(self.centralwidget)
        self.lb_log_window.setGeometry(QtCore.QRect(20, 150, 581, 201))
        self.lb_log_window.setObjectName("lb_log_window")
        self.lb_log_window.setStyleSheet('border: 2px solid grey; border-radius: 5px; background-color: rgba(0, 0, 0, 0)')
        self.lb_log_window.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        self.lb_log_window.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)

        self.tb_ip = QtWidgets.QTextEdit(self.centralwidget)
        self.tb_ip.setGeometry(QtCore.QRect(615, 35, 150, 180))
        font2 = QtGui.QFont()
        font2.setPointSize(8)
        font2.setBold(True)
        self.tb_ip.setFont(font2)
        self.tb_ip.setObjectName("tb_ip")
        self.tb_ip.setStyleSheet('border: 0px solid grey; border-radius: 5px; background-color: rgba(0, 0, 0, 0)')
        self.tb_ip.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        self.tb_ip.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)

        self.lb_info_errors = QtWidgets.QLabel(self.centralwidget)
        self.lb_info_errors.setGeometry(QtCore.QRect(625, 260, 150, 60))
        font3 = QtGui.QFont()
        font3.setPointSize(7)
        self.lb_info_errors.setFont(font3)
        self.lb_info_errors.setStyleSheet('color:grey')
        self.lb_info_errors.setObjectName("lb_info_errors")

        self.lb_gif = QtWidgets.QLabel(self.centralwidget)
        self.lb_gif.setGeometry(QtCore.QRect(620, 41, 43, 11))
        self.lb_gif.setText("")
        self.lb_gif.setScaledContents(True)
        self.lb_gif.setObjectName("label")
        self.gif = QtGui.QMovie('animation.gif')

        self.by = QtWidgets.QLabel(self.centralwidget)
        self.by.setGeometry(QtCore.QRect(715, 385, 81, 16))
        # self.label_12.setStyleSheet("border :1px solid blue;")
        font4 = QtGui.QFont()
        font4.setBold(True)
        font4.setWeight(75)
        self.by.setFont(font4)
        self.by.setStyleSheet('color:grey')
        self.by.setObjectName("by")


        self.rb_vethernet = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_vethernet.setGeometry(QtCore.QRect(300, 116, 82, 17))
        self.rb_vethernet.setObjectName("rb_vethernet")

        self.rb_wintun = QtWidgets.QRadioButton(self.centralwidget)
        self.rb_wintun.setGeometry(QtCore.QRect(300, 98, 82, 17))
        self.rb_wintun.setObjectName("rb_wintun")
        self.rb_wintun.setChecked(True)

        ################
        self.timer_info = QTimer()
        self.timer_info.setInterval(10000)
        self.timer_info.timeout.connect(self.info_show)

        self.timer_parse = QTimer()
        self.timer_parse.setInterval(10000)
        self.timer_parse.timeout.connect(self.thread_parse)


        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btn_close.setText(_translate("MainWindow", ""))
        self.btn_minimize.setText(_translate("MainWindow", ""))
        self.main_name.setText(_translate("MainWindow", "      GUI for tun2socks v. 2.0"))
        self.lb_proxy_address.setText(_translate("MainWindow", "Proxy address"))
        self.lb_proxy_port.setText(_translate("MainWindow", "Port"))
        self.lb_proxy_login.setText(_translate("MainWindow", "Login"))
        self.lb_proxy_password.setText(_translate("MainWindow", "Password"))
        self.lb_cb_check_proxy.setText(_translate("MainWindow", "Check proxy"))
        self.lb_cb_dns.setText(_translate("MainWindow", "DNS"))
        self.lb_le_dns_1.setText(_translate("MainWindow", "DNS address primary"))
        self.lb_le_dns_2.setText(_translate("MainWindow", "DNS address alternative"))
        self.lb_cb_dns_crypt.setText(_translate("MainWindow", "DNS crypt"))
        self.lb_cb_fake_webrtc.setText(_translate("MainWindow", "Fake webrtc"))
        self.lb_cb_log_sillent.setText(_translate("MainWindow", "Logout off"))
        self.lb_info.setText(_translate("MainWindow", "IP Info"))
        self.btn_start.setText(_translate("MainWindow", "Start"))
        self.btn_stop.setText(_translate("MainWindow", "Stop"))
        self.btn_exit.setText(_translate("MainWindow", "Exit"))
        self.btn_resrart.setText(_translate("MainWindow", "Restart FWRTC"))
        self.btn_donate.setText(_translate("MainWindow", "Donate"))
        self.rb_vethernet.setText(_translate("MainWindow", "VEthernet"))
        self.rb_wintun.setText(_translate("MainWindow", "Wintun"))
        self.lb_rb_driver.setText(_translate("MainWindow", "Network"))
        self.by.setText(_translate("MainWindow", "by sova"))
        self.lb_info_errors.setText(_translate("MainWindow", "If the program crashes,\ntry running it without logout.\nby activating the 'logout off'\ncheckbox"))





class ExampleApp(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.old_pos = None
        self.tray_icon = QSystemTrayIcon(self)
        self.tray_icon.setIcon(QIcon("icon.ico"))




        self.show_action = QAction("Show", self)
        self.quit_action = QAction("Exit", self)
        self.stop_action = QAction("Stop", self)
        self.hide_action = QAction("Hide", self)
        self.show_action.triggered.connect(self.show)
        self.hide_action.triggered.connect(self.hide)
        self.stop_action.triggered.connect(self.tun_stop)
        self.quit_action.triggered.connect(qApp.quit)

        tray_menu = QMenu()
        tray_menu.addAction(self.show_action)
        tray_menu.addAction(self.hide_action)
        tray_menu.addAction(self.stop_action)
        tray_menu.addAction(self.quit_action)
        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.show()
        self.restore_vars()
        self.throbber()
        self.stop_action.setDisabled(True)
        Thread(target=self.get_webrtc_ip).start()
        self.timer_info.start(3000)
        th2 = Thread(target=self.get_default_setting)
        th2.start()



    def on_min(self):
        self.showMinimized()

    def hide_to_tray(self):
        self.hide()
        self.tray_icon.showMessage("GUI for tun2socks", "Application was minimized to Tray", QIcon("icon.png"), 300)


    def resizeEvent(self, QResizeEvent):
        super(ExampleApp, self).resizeEvent(QResizeEvent)
        self.main_name.setFixedWidth(self.main_name.width())

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            x_main = window.geometry().x()
            y_main = window.geometry().y()
            cursor_x = QtGui.QCursor.pos().x()
            cursor_y = QtGui.QCursor.pos().y()

            if x_main <= cursor_x <= x_main + window.geometry().width():
                if y_main <= cursor_y <= y_main + window.main_name.geometry().height():
                    self.old_pos = event.pos()
                else:
                    self.old_pos = None

        elif event.button() == QtCore.Qt.RightButton:
            self.old_pos = None

    def mouseReleaseEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.old_pos = None

    def mouseMoveEvent(self, event):
        if not self.old_pos:
            return
        delta = event.pos() - self.old_pos
        self.move(self.pos() + delta)

    # gui setting when dns crypt is checked
    def dns_crypt(self):
        if self.cb_dns_crypt.isChecked():
            self.cb_dns.setChecked(True)
            self.cb_dns.setDisabled(True)
            self.le_dns_address_1.setText('127.0.0.1')
            self.le_dns_address_1.setDisabled(True)
            self.le_dns_address_2.setDisabled(True)
            self.le_dns_address_2.setText('')
        else:
            self.cb_dns.setChecked(False)
            self.cb_dns.setDisabled(False)
            self.le_dns_address_1.setText('')
            self.le_dns_address_1.setDisabled(False)
            self.le_dns_address_2.setDisabled(False)

    # gui setting when fake webrtc is checked
    def fake_webrtc(self):
        if self.cb_fak_webrtc.isChecked():
            self.cb_dns_crypt.setChecked(True)
            self.cb_dns_crypt.setDisabled(True)
            self.cb_check_proxy.setChecked(True)
            self.cb_check_proxy.setDisabled(True)
            self.dns_crypt()
        else:
            self.cb_dns_crypt.setDisabled(False)
            self.cb_dns_crypt.setChecked(False)
            self.cb_dns.setChecked(False)
            self.cb_dns.setDisabled(False)
            self.cb_check_proxy.setChecked(False)
            self.cb_check_proxy.setDisabled(False)
            self.le_dns_address_1.setText('')
            self.le_dns_address_1.setDisabled(False)
            self.le_dns_address_2.setDisabled(False)

    # Save proxy and DNS parameters to file
    def save_vars(self):
        f = open(fname, 'w')
        f.write(self.le_pr_address.text() + ',')
        f.write(self.le_pr_port.text() + ',')
        f.write(self.le_dns_address_1.text() + ',')
        f.write(self.le_dns_address_2.text() + ',')
        f.write(self.le_pr_login.text() + ',')
        f.write(self.le_pr_password.text() + ',')
        if self.cb_check_proxy.isChecked():
            f.write('True,')
        else:
            f.write('False,')
        if self.cb_dns.isChecked():
            f.write('True,')
        else:
            f.write('False,')
        if self.cb_dns_crypt.isChecked():
            f.write('True,')
        else:
            f.write('False,')
        if self.rb_wintun.isChecked():
            f.write('True,')
        else:
            f.write('False,')
        if self.rb_vethernet.isChecked():
            f.write('True,')
        else:
            f.write('False,')
        if self.cb_fak_webrtc.isChecked():
            f.write('True,')
        else:
            f.write('False,')
        if self.cb_log_silent.isChecked():
            f.write('True')
        else:
            f.write('False')
        f.close()
        return 0

    # Restore proxy and DNS parameters form file
    def restore_vars(self):
        if os.path.isfile(fname):
            f = open(fname, 'r')
            all_val = f.readline()
            all_split = all_val.split(',')
            if len(all_split) == 13:
                self.le_pr_address.setText(all_split[0])
                self.le_pr_port.setText(all_split[1])
                self.le_dns_address_1.setText(all_split[2])
                self.le_dns_address_2.setText(all_split[3])
                self.le_pr_login.setText(all_split[4])
                self.le_pr_password.setText(all_split[5])
                if all_split[6] == 'True':
                    self.cb_check_proxy.setChecked(True)
                else:
                    self.cb_check_proxy.setChecked(False)
                if all_split[7] == 'True':
                    self.cb_dns.setChecked(True)
                else:
                    self.cb_dns.setChecked(False)
                if all_split[8] == 'True':
                    self.cb_dns_crypt.setChecked(True)
                    self.dns_crypt()
                else:
                    self.cb_dns_crypt.setChecked(False)
                if all_split[9] == 'True':
                    self.rb_wintun.setChecked(True)
                else:
                    self.rb_wintun.setChecked(False)
                if all_split[10] == 'True':
                    self.rb_vethernet.setChecked(True)
                else:
                    self.rb_vethernet.setChecked(False)
                if all_split[12] == 'True':
                    self.cb_log_silent.setChecked(True)
                else:
                    self.cb_log_silent.setChecked(False)
                if all_split[11] == 'True':
                    self.cb_fak_webrtc.setChecked(True)
                    self.fake_webrtc()
            else:
                f.close()
                return 2
            f.close()
        else:
            return 1
        return 0


    def dialog(self, text):
        dialog = QMessageBox(self.centralwidget)
        dialog.setWindowTitle('Attention')
        dialog.setText(text)
        dialog.setIcon(QMessageBox.Warning)
        dialog.exec_()

    # Prestart setting
    def start(self):

        th1 = Thread(target=self.start_go_athread)
        ipv4_pattern = re.compile("^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$")
        ip = self.le_pr_address.text()
        port = self.le_pr_port.text()
        if port == '':
            self.dialog(f"Port field can't be empty")
            return
        else:
            port_int = int(port)
        if not ipv4_pattern.match(ip):
            self.dialog(f"Incorrect IP address: {ip}\nShould be in range: 0.0.0.0 ... 255.255.255.255")
        elif not 1 <= port_int <= 65535:
            self.dialog(f"Incorrect port number: {port_int}\nShould be in range 1..65535")
        elif self.cb_dns.isChecked():
            dns1 = self.le_dns_address_1.text()
            dns2 = self.le_dns_address_2.text()
            if not ipv4_pattern.match(dns1):
                self.dialog(f"Incorrect DNS primary: {dns1}\nShould be in range: 0.0.0.0 ... 255.255.255.255")
            elif dns2 != '' and not ipv4_pattern.match(dns2):
                self.dialog(f"Incorrect DNS alternative: {dns2}\nShould be in range: 0.0.0.0 ... 255.255.255.255")
            else:
                self.logger('Application tun2socks has been starting...', newline=False, date=True)
                if self.cb_log_silent.isChecked():
                    self.logger('SILENT MODE APPLIED FOR LOGOUT', date=True)
                th1.start()
                self.restart_timers()

        else:
            self.logger('Application tun2socks has been starting...', newline=False, date=True)
            if self.cb_log_silent.isChecked():
                self.logger('SILENT MODE APPLIED FOR LOGOUT', date=True)
            th1.start()
            self.restart_timers()

    def restart_timers(self):
        if self.timer_parse.isActive():
            self.timer_parse.stop()
            self.timer_parse.start(9000)
        else:
            self.timer_parse.start(9000)
        if self.timer_info.isActive():
            self.timer_info.stop()
            self.timer_info.start(12000)
        else:
            self.timer_info.start(12000)
        self.throbber()


    # Start application's tun2socks
    def start_go_athread(self):
        global dns_def_1, dns_def_2
        ip = self.le_pr_address.text()
        port = self.le_pr_port.text()
        login = self.le_pr_login.text()
        passwd = self.le_pr_password.text()
        dns1 = self.le_dns_address_1.text()
        dns2 = self.le_dns_address_2.text()
        if self.cb_check_proxy.isChecked():
            if not self.proxy_check():
                return
        if self.cb_fak_webrtc.isChecked():
            self.btn_resrart.setEnabled(True)
            self.cb_fak_webrtc.setDisabled(True)
        else:
            self.btn_resrart.setEnabled(False)
        self.btn_stop.setEnabled(True)
        self.btn_start.setDisabled(True)
        self.btn_exit.setDisabled(True)
        self.rb_vethernet.setDisabled(True)
        self.rb_wintun.setDisabled(True)
        self.cb_log_silent.setDisabled(True)
        self.stop_action.setDisabled(False)
        self.quit_action.setDisabled(True)
        if self.rb_vethernet.isChecked():
            t2s = f'{dir}\\tun2socks.exe --dns-addresses={dns1},{dns2} --product-mode=no --proxyserver={ip} --proxyport={port} --proxyuser={login} --proxypassword={passwd}'
            # t2s = f'cd {dir} && powershell -command ".\\tun2socks.exe --dns-addresses={dns1},{dns2} --product-mode=no --proxyserver={ip} --proxyport={port} --proxyuser={login} --proxypassword={passwd}"'
            # t2s = f'start.bat'
        else:
            if login:
                socks5 = f'socks5://{login}:{passwd}@{ip}:{port}'
            else:
                socks5 = f'socks5://{ip}:{port}'
            t2s = ['tun2socks-windows-amd64.exe', '-device', 'tun://gateway', '-proxy', socks5]

        global proc
        proc = Popen(t2s, shell=True, bufsize=-1, stdout=PIPE, stderr=None, text=True, close_fds=True)

        time.sleep(1)
        if self.rb_vethernet.isChecked():
            self.start_setting_vethernet()
        else:
            self.start_setting_wintun()
        th5 = Thread(target=self.while_logs_from_application)
        th5.start()
    def while_logs_from_application(self):
        global proc
        count = 9
        while (out:=proc.stdout.readline().rstrip()):
            if self.cb_log_silent.isChecked():
                pass
            else:
                if self.rb_wintun.isChecked():
                    tuples = ['time=', 'level=info msg=', 'level=warning msg=', 'client handshake: ']
                    for word in tuples:
                        out = out.replace(word,'')
                    if count % 9 == 0:
                        self.logger(out, newline=True)
                        count += 1
                    else:
                        count += 1
                    # time.sleep(0.3)
                else:
                    if count % 9 == 0:
                        self.logger(out, newline=True)
                        count += 1
                    else:
                        count += 1

                    # time.sleep(0.3)



    def logger(self, message, newline=True, date=False, color='black'):
        if date:
            if self.rb_wintun.isChecked():
                date_str = datetime.now().astimezone().__str__()
                date_str = '"' + date_str[0:10] + 'T' + date_str[11:19] + date_str[26:] + '" '
            else:
                date_str = datetime.now().__str__().split('.')[0]
                date_str = date_str.replace('-', '.')
                if date_str[11] == '0':
                    date_str = '['f'{date_str[8:10]}''.'f'{date_str[5:7]}''.'f'{date_str[0:4]}'+' '+ f'{date_str[12:]}'']'
                else:
                    date_str = '['f'{date_str[8:10]}''.'f'{date_str[5:7]}''.'f'{date_str[0:4]}'f'{date_str[10:]}'']'
        if newline:
            if date:
                self.lb_log_window.insertPlainText('\n' + date_str + ' ' + message)
            else:
                self.lb_log_window.insertPlainText('\n' + message)
        else:
            if date:
                self.lb_log_window.insertPlainText(date_str + ' ' + message)
            else:
                self.lb_log_window.insertPlainText(message)
        self.lb_log_window.moveCursor(QtGui.QTextCursor.End)
        # self.lb_log_window.update()

    def tun_stop(self):
        self.throbber()
        self.timer_parse.start(15000)
        self.timer_info.start(18000)
        Thread(target=self.tun_stop_thread).start()
        self.btn_stop.setDisabled(True)
        self.btn_resrart.setDisabled(True)
        self.cb_log_silent.setDisabled(False)
        self.logger('Terminating tun2socks process...', date=True)
    def tun_stop_thread(self):
        global proc, index_if, dns_def_1, dns_def_2
        process = psutil.Process(proc.pid)
        for proc in process.children(recursive=True):
            proc.kill()
        process.kill()
        if self.cb_dns_crypt.isChecked():
            run(f'cd {dir_dns_crypt} && dnscrypt-proxy.exe -service stop && dnscrypt-proxy.exe -service uninstall', shell=True)
        if self.rb_wintun.isChecked():
            root_win = r'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\NetworkList\Profiles'
            ip = self.le_pr_address.text()
            run(f'route delete {ip}', shell=True)
            run(f'FOR /F "usebackq delims=\ tokens=8 " %a IN (`reg query "{root_win}" /s /f "gateway" ^|findstr "HKEY" `) do ( echo N|reg delete "{root_win}\%a" /f )', shell=True)

        if dns_def_1 == 'DHCP':
            run(f'powershell -command Set-DnsClientServerAddress -InterfaceIndex {index_if} -ResetServerAddresses')
        elif dns_def_2 == '':
            run(f'powershell -command Set-DnsClientServerAddress -InterfaceIndex {index_if} -ServerAddress "{dns_def_1}"', shell=True)
        else:
            run(f'powershell -command Set-DnsClientServerAddress -InterfaceIndex {index_if} -ServerAddresses ("{dns_def_1}", "{dns_def_2}")', shell=True)

        run(f'FOR /F "usebackq delims=: tokens=2 " %a IN (`powershell -command "Get-NetAdapter -InterfaceIndex {index_if}|fl" ^|findstr "Name" `) do powershell -command "Restart-NetAdapter -Name%a"', shell=True)
        self.save_vars()
        self.btn_start.setDisabled(False)
        self.btn_exit.setDisabled(False)
        # self.quit_action.setDisabled(False)
        run('taskkill /im fakestun.exe /f', shell=True)
        self.logger('tun2socks proccess TERMINATED!', date=True)
        self.logger('Ethernet adapter will be restarting, please wait some seconds\n', date=True)
        self.cb_fak_webrtc.setEnabled(True)
        self.rb_vethernet.setDisabled(False)
        self.rb_wintun.setDisabled(False)
        self.stop_action.setDisabled(True)
        self.quit_action.setDisabled(False)


    def start_setting_vethernet(self):
        global index_if, dns_def_1, dns_def_2
        if self.cb_dns.isChecked():
            dns1 = self.le_dns_address_1.text()
            dns2 = self.le_dns_address_2.text()
        else:
            dns1 = dns_def_1
            dns2 = dns_def_2
        if dns1 == 'DHCP':
            run(f'powershell -command Set-DnsClientServerAddress -InterfaceIndex {index_if} -ResetServerAddresses')
        elif dns2 == '':
            run(f'powershell -command Set-DnsClientServerAddress -InterfaceIndex {index_if} -ServerAddress "{dns1}"', shell=True)
        else:
            run(f'powershell -command Set-DnsClientServerAddress -InterfaceIndex {index_if} -ServerAddresses ("{dns1}", "{dns2}")', shell=True)
        if self.cb_dns_crypt.isChecked():
            run(f'cd {dir_dns_crypt} && dnscrypt-proxy.exe -service install && dnscrypt-proxy.exe -service start', shell=True)
            self.btn_resrart.setEnabled(True)
        if self.cb_fak_webrtc.isChecked():
            th4 = Thread(target=self.start_fakewebrtc)
            th4.start()

    def start_setting_wintun(self):
        global index_if, ip_if, tun_if
        ip = self.le_pr_address.text()

        run(f'netsh interface ip set address name="gateway" static 192.168.105.1 255.255.255.0 gateway=none', shell=True)
        time.sleep(1)
        run(f'powershell -command "Get-NetIPAddress -AddressFamily ipv4|ft | Out-File tun_if.txt"', shell=True)
        word = '192.168.105.1'
        with io.open('tun_if.txt', encoding='UTF-16 LE') as file:
            for line in file:
                if word in line:
                    sub_line = line.split()
                    tun_if = int(sub_line[0])

        run(f'route add {ip} mask 255.255.255.255 {ip_if} && route add 0.0.0.0 mask 0.0.0.0 192.168.105.0 if "{tun_if}" metric 30 && route add 0.0.0.0 mask 128.0.0.0 192.168.105.0 if "{tun_if}" metric 30 && route add 128.0.0.0 mask 128.0.0.0 192.168.105.0 if "{tun_if}" metric 30',shell=True)

        if self.cb_dns.isChecked():
            dns1 = self.le_dns_address_1.text()
            dns2 = self.le_dns_address_2.text()
            self.btn_resrart.setEnabled(True)
            if dns2 == '':
                run(f'powershell -command Set-DnsClientServerAddress -InterfaceIndex {index_if} -ServerAddress "{dns1}"', shell=True)
            else:
                run(f'powershell -command Set-DnsClientServerAddress -InterfaceIndex {index_if} -ServerAddresses ("{dns1}", "{dns2}")', shell=True)
        else:
            pass

        if self.cb_dns_crypt.isChecked():
            run(f'cd {dir_dns_crypt} && dnscrypt-proxy.exe -service install && dnscrypt-proxy.exe -service start', shell=True)
        if self.cb_fak_webrtc.isChecked():
            th4 = Thread(target=self.start_fakewebrtc)
            th4.start()

    # Getting your setting of Ethernet adapter
    def get_default_setting(self):
        global index_if, ip_if, dns_def_1, dns_def_2
        run(r'''powershell -command "(Get-NetRoute -ErrorAction SilentlyContinue -DestinationPrefix '0.0.0.0/0', '::/0' | Sort-Object -Property { $_.InterfaceMetric } | Select-Object -First 1 ) | Out-File def-gw-info.txt"''', shell=True, check=True)
        word = '0.0.0.0/0'
        with io.open('def-gw-info.txt', encoding='UTF-16 LE') as file:
            for line in file:
                if word in line:
                    sub_line = line.split()
                    index_if = int(sub_line[0])
                    ip_if = sub_line[2]

        run(f'''FOR /F "usebackq delims=\ tokens=8 " %a IN (`reg query "{dir_regedit}" /s /f "{ip_if}" ^|findstr "HKEY" `) do (set def_gw_prof_profile=%a) && FOR /F "usebackq delims=" %a IN (`reg query {dir_regedit}\%def_gw_prof_profile% /s /f NameServer ^| findstr /V "DhcpNameServer :" `) do echo %a DHCP > dns-saved.txt''', shell=True, check=True)
        word_2 = 'NameServer'
        with io.open('dns-saved.txt', encoding='UTF-8') as file_2:
            for line_2 in file_2:
                if word_2 in line_2:
                    sub_line_2 = line_2.split()
                    if sub_line_2[2] != 'DHCP':
                        sub_line_3 = sub_line_2[2].split(',')
                        dns_def_1 = sub_line_3[0]
                        if ',' in [sub_line_2[2]]:
                            dns_def_2 = sub_line_3[1]
                        else:
                            dns_def_2 = ''
                    else:
                        dns_def_1 = sub_line_2[2]
                        dns_def_2 = ''

    def proxy_check(self):
        # Get proxy parameters
        ip = self.le_pr_address.text()
        port = self.le_pr_port.text()
        login = self.le_pr_login.text()
        passwd = self.le_pr_password.text()


        # Set socks5 string
        if login:
            socks5 = f'socks5://{login}:{passwd}@{ip}:{port}'
        else:
            socks5 = f'socks5://{ip}:{port}'
        self.logger('Checking proxy ...    ',newline=True, date=True)

        proxies = {'http': f'{socks5}', 'https': f'{socks5}'}
        url1 = 'http://2ip.ru'
        url2 = 'http://ifconfig.me'
        headers = {"User-Agent": "curl/7.47.0"}

        res = None

        try:
            res = requests.get(url1, proxies=proxies, headers=headers, timeout=PROXY_CHECK_TIMEOUT)
        except:
            pass

        if not res:
            try:
                res = requests.get(url2, proxies=proxies, headers=headers, timeout=PROXY_CHECK_TIMEOUT)
            except:
                pass

        if res:
            self.logger('OK',newline=False)
        else:
            self.logger('FAIL\n',newline=False)
            self.btn_start.setDisabled(False)
            self.btn_stop.setDisabled(True)
            self.btn_resrart.setDisabled(True)
        return res

    def get_webrtc_ip(self):
        global ip_address, country_flag, info_tcp_block, tz
        # self.lb_gif.clear()
        url = 'https://browserleaks.com/ip'
        response = None

        try:
            response = requests.get(url)
        except:
            pass
        if response != None:

            soup = BS(response.text, 'html.parser')


            ip_element = soup.find('span', {'class': 'flag-container'})
            ip_address = ip_element.text
            country_flag = ip_element.next_element if ip_element else ''
            # self.timer_parse.stop()
            tcp_all_info = soup.find_all("td")
            tcp_info_tuple = []
            for tcp_info in tcp_all_info:
                tcp_info_tuple.append(tcp_info.text)

            tz = tcp_info_tuple[tcp_info_tuple.index('Local Time') + 1]
            tz = tz[5:12] + tz[17:]

            info_tcp_block = f"TCP/IP Fingerprint:\n\n{tcp_info_tuple[tcp_info_tuple.index('OS') + 1]}\n\n{tcp_info_tuple[tcp_info_tuple.index('Link') + 1]}\n\n{tcp_info_tuple[tcp_info_tuple.index('MTU')]} {tcp_info_tuple[tcp_info_tuple.index('MTU') + 1]}\n\n{tcp_info_tuple[tcp_info_tuple.index('Distance')]} {tcp_info_tuple[tcp_info_tuple.index('Distance') + 1]}"
        else:
            ip_address = 'N/A'


    def info_show(self):
        self.lb_gif.clear()
        global ip_address, country_flag, info_tcp_block, tz
        if ip_address == 'N/A':
            self.tb_ip.clear()
            self.tb_ip.insertPlainText('N/A')
            # self.timer_info.stop()
        else:
            if len(country_flag) != '':
                country_code = str(country_flag)[-6:-4]
            else:
                self.tb_ip.clear()
                self.tb_ip.insertPlainText('N/A')
                return
            self.tb_ip.clear()
            self.tb_ip.insertHtml(f'<img src="w20\\{country_code}.png" alt="N/A">')
            self.tb_ip.insertPlainText('  ' +ip_address +'\n' + tz + ('\n'* 3) + info_tcp_block)
            # self.timer_info.stop()
            # self.throbber()

    def throbber(self):
        self.lb_gif.setMovie(self.gif)
        self.tb_ip.clear()
        self.gif.start()

    def thread_parse(self):
        Thread(target=self.get_webrtc_ip).start()


    def donate_info(self):
        print(globals())
        self.donate = QMessageBox()
        self.donate.setWindowTitle('DONATE')
        self.donate.setStandardButtons(QMessageBox.Close)
        self.donate.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        self.donate.setIconPixmap(QPixmap('w20\dd.png'))
        font5 = QtGui.QFont()
        font5.setBold(True)
        font5.setPointSize(10)
        self.donate.setFont(font5)
        self.donate.setText("\nTether USD (USDT) Address: \n\n\n\nTEd4JZJvajVdEs3APMhRgRZqiY8evzcXeY\n\n\n\n\n\n\n\n\nBitcoin (BTC) Address: \n\n\n\nbc1qnucplzkl54a9nnc2wmfn4z6hehtwq7mjum80p0\n\n\n\n\n\n\n\n\nOther methods:\n\n\n\nhttps://www.donationalerts.com/r/sova2022")
        self.donate.exec()


    def start_fakewebrtc(self):
        time.sleep(3)
        run(f'cd {dir_fakestan} && fakestun.exe', shell=True)
        time.sleep(3)
        run(f'dnscrypt-proxy.exe -service stop > nul 2>&1 && ipconfig /flushdns > nul && dnscrypt-proxy.exe -service start', shell=True)



    def restart_fakewebrtc(self):
        run('taskkill /im fakestun.exe /f', shell=True)
        Thread(target=self.start_fakewebrtc).start()
        self.logger('STARTING FAKESTUN PROCESS', date=True)

    def exit_app(self):
        self.save_vars()
        self.close()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    window = ExampleApp()
    window.show()
    sys.exit(app.exec_())
